import os
import random
import re
import sys
import copy
import math

DAMPING = 0.85
SAMPLES = 10000


def main():
    if len(sys.argv) != 2:
        sys.exit("Usage: python pagerank.py corpus")
    corpus = crawl(sys.argv[1])
    ranks = sample_pagerank(corpus, DAMPING, SAMPLES)
    print(f"PageRank Results from Sampling (n = {SAMPLES})")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")
    ranks = iterate_pagerank(corpus, DAMPING)
    print(f"PageRank Results from Iteration")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")


def crawl(directory):
    """
    Parse a directory of HTML pages and check for links to other pages.
    Return a dictionary where each key is a page, and values are
    a list of all other pages in the corpus that are linked to by the page.
    """
    pages = dict()

    # Extract all links from HTML files
    for filename in os.listdir(directory):
        if not filename.endswith(".html"):
            continue
        with open(os.path.join(directory, filename)) as f:
            contents = f.read()
            links = re.findall(r"<a\s+(?:[^>]*?)href=\"([^\"]*)\"", contents)
            pages[filename] = set(links) - {filename}

    # Only include links to other pages in the corpus
    for filename in pages:
        pages[filename] = set(
            link for link in pages[filename]
            if link in pages
        )

    return pages


def transition_model(corpus, page, damping_factor):
    """
    Return a probability distribution over which page to visit next,
    given a current page.

    With probability `damping_factor`, choose a link at random
    linked to by `page`. With probability `1 - damping_factor`, choose
    a link at random chosen from all pages in the corpus.
    """
    probability_distribution = {}
    
    #Pages with links
    if corpus[page]:
        #The random surfer should randomly choose one of all pages in the corpus with equal probability.
        for link in corpus:
            probability_distribution[link] = (1 - damping_factor) / len(corpus)
        
        #The random surfer should randomly choose one of the links from page with equal probability.
            if link in corpus[page]:
                probability_distribution[link] += damping_factor / len(corpus[page])
    
    #Pages without links
    else:
        for link in corpus:
            probability_distribution[link] = 1 / len(corpus)
    
    return probability_distribution


def sample_pagerank(corpus, damping_factor, n):
    """
    Return PageRank values for each page by sampling `n` pages
    according to transition model, starting with a page at random.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    pagerank = {}
    
    for page in corpus:
        pagerank[page] = 0
        
    #The first sample should be generated by choosing from a page at random.
    page = random.choice(list(corpus.keys()))
    
    #For each of the remaining samples, the next sample should be generated from the previous sample based on the previous sampleâ€™s transition model.
    for i in range(1 , n):
        new_pagerank = transition_model(corpus, page, damping_factor)
        
        for page in pagerank:
            pagerank[page] = ((i - 1) * pagerank[page] + new_pagerank[page]) / i
            
        page = random.choices(list(pagerank.keys()), list(pagerank.values()), k=1)[0]    
    
    return pagerank


def iterate_pagerank(corpus, damping_factor):
    """
    Return PageRank values for each page by iteratively updating
    PageRank values until convergence.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    n = len(corpus)
    d = damping_factor
    pagerank = {}

    # Assign initial values for pagerank
    for page in corpus:
        pagerank[page] = 1 / n

    repeat = True
    while repeat:
        
        #Copy the current ranks to calculate withouth changing the current ranks.
        new_pagerank = copy.deepcopy(pagerank)
        
        # Calculate new rank values based on all of the current rank values
        for page in pagerank:
            sum = float(0)
            for possible_page in corpus:
                # Considering each possible page that links to current page
                if page in corpus[possible_page]:
                    sum += pagerank[possible_page] / len(corpus[possible_page])
                # A page that has no links is interpreted as having one link for every page (including itself)
                if not corpus[possible_page]:
                    sum += pagerank[possible_page] / n

            new_pagerank[page] = (1 - d) / n + d * sum
            
        #Reset repeat value
        repeat = False

        # If any of the values changes by more than the threshold, repeat the process
        for page in pagerank:
            if abs(new_pagerank[page] - pagerank[page]) >0.001:
                repeat = True
            # Assign new values to current values
            pagerank[page] = new_pagerank[page]

    return pagerank

if __name__ == "__main__":
    main()
